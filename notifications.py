import os
import logging
from datetime import datetime, timedelta
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, From, To, Subject, PlainTextContent, HtmlContent
from flask import request
from app import app, db
from models import Booking, User, Service, Notification

# ุชูููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
FROM_EMAIL = 'no-reply@localservices.com'  # ูููู ุชุบููุฑู ุฅูู ุจุฑูุฏ ุฅููุชุฑููู ุญูููู

def create_notification(user_id, title, content, notification_type='info', related_id=None, related_type=None):
    """ุฅูุดุงุก ุฅุดุนุงุฑ ุฌุฏูุฏ ูููุณุชุฎุฏู"""
    try:
        notification = Notification(
            user_id=user_id,
            title=title,
            content=content,
            notification_type=notification_type,
            related_id=related_id,
            related_type=related_type,
            is_read=False
        )
        db.session.add(notification)
        db.session.commit()
        logging.info(f"ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ุฌุฏูุฏ ูููุณุชุฎุฏู {user_id}: {title}")
        return notification
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฅุดุนุงุฑ: {str(e)}")
        db.session.rollback()
        return None

def send_email(to_email, subject, html_content):
    """ุฅุฑุณุงู ุจุฑูุฏ ุฅููุชุฑููู ุจุงุณุชุฎุฏุงู SendGrid"""
    try:
        if not SENDGRID_API_KEY:
            logging.error("ููุชุงุญ SendGrid API ุบูุฑ ูุชููุฑ. ุชุนุฐุฑ ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู.")
            return False
        
        message = Mail(
            from_email=FROM_EMAIL,
            to_emails=to_email,
            subject=subject,
            html_content=html_content
        )
        
        sg = SendGridAPIClient(SENDGRID_API_KEY)
        response = sg.send(message)
        
        if response.status_code >= 200 and response.status_code < 300:
            logging.info(f"ุชู ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุจูุฌุงุญ ุฅูู {to_email}")
            return True
        else:
            logging.error(f"ูุดู ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: {response.status_code}, {response.body}")
            return False
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: {str(e)}")
        return False

def send_review_notification(booking_id):
    """ุฅุฑุณุงู ุฅุดุนุงุฑ ูููุณุชุฎุฏู ูุชูููู ุงูุฎุฏูุฉ ุจุนุฏ ุงูุชูุงุก ุงูููุนุฏ"""
    try:
        booking = Booking.query.get(booking_id)
        if not booking:
            logging.error(f"ุงูุญุฌุฒ ุฑูู {booking_id} ุบูุฑ ููุฌูุฏ.")
            return False
        
        # ุงูุชุญูู ูู ุงูุชูุงุก ุงูููุนุฏ
        now = datetime.utcnow()
        if booking.booking_date + timedelta(minutes=booking.service.duration) > now:
            logging.info(f"ุงูููุนุฏ ุฑูู {booking_id} ูู ููุชู ุจุนุฏ.")
            return False
        
        # ุงูุชุญูู ูู ุญุงูุฉ ุงูุญุฌุฒ - ูุฌุจ ุฃู ูููู ูุคูุฏูุง ุฃู ููุชูููุง
        if booking.status not in ['confirmed', 'completed']:
            logging.info(f"ุญุงูุฉ ุงูุญุฌุฒ {booking.status} ุบูุฑ ููุงุณุจุฉ ูุฅุฑุณุงู ุฅุดุนุงุฑ ุงูุชูููู.")
            return False
        
        user = User.query.get(booking.client_id)
        service = Service.query.get(booking.service_id)
        
        # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุงู ุจุงูุชูููู ุจุงููุนู
        from models import Review
        existing_review = Review.query.filter_by(
            user_id=booking.client_id,
            service_id=booking.service_id
        ).first()
        
        if existing_review:
            logging.info(f"ุงููุณุชุฎุฏู {user.id} ูุงู ุจุงููุนู ุจุชูููู ุงูุฎุฏูุฉ {service.id}.")
            return False
        
        # ุฅูุดุงุก ุฑุงุจุท ุงูุชูููู - ุฅูุง ูุตูุญุฉ ุงูุชูุงุตูู ุฃู ูููุญุฉ ุงูุชุญูู
        dashboard_url = f"{request.host_url}dashboard"
        service_url = f"{request.host_url}services/{service.id}"
        
        # ุฅูุดุงุก ุฅุดุนุงุฑ ุฏุงุฎูู ูู ุงููููุน
        notification_title = f"๐ ูููู ุชุฌุฑุจุชู ูุน {service.name}"
        notification_content = (
            f"ูุฃูู ุฃู ุชููู ูุฏ ุงุณุชูุชุนุช ุจุฎุฏูุฉ {service.name}. "
            f"ููููู ุงูุขู ุชูููู ุงูุฎุฏูุฉ ูู ุฎูุงู ุงูุถุบุท ุนูู ุฒุฑ 'ุชูููู' ูู ูุงุฆูุฉ ุงูุญุฌูุฒุงุช."
        )
        
        notification = create_notification(
            user_id=user.id,
            title=notification_title,
            content=notification_content,
            notification_type='info',
            related_id=booking.id,
            related_type='review_reminder'
        )
        
        if notification:
            logging.info(f"ุชู ุฅูุดุงุก ุฅุดุนุงุฑ ุชูููู ุจูุฌุงุญ ูููุณุชุฎุฏู {user.id}ุ ููุญุฌุฒ {booking_id}")
        
        # ุฅูุดุงุก ูุญุชูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
        subject = notification_title
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; direction: rtl; text-align: right; }}
                .container {{ padding: 20px; border: 1px solid #eee; border-radius: 10px; }}
                .header {{ color: #4361ee; font-size: 24px; margin-bottom: 20px; }}
                .button {{ background-color: #4361ee; color: white; padding: 10px 20px; text-decoration: none;
                        border-radius: 5px; font-weight: bold; display: inline-block; margin-top: 15px; }}
                .footer {{ margin-top: 30px; font-size: 12px; color: #777; }}
                .highlight {{ color: #4361ee; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">ุชูููู ุงูุฎุฏูุฉ</div>
                
                <p>ูุฑุญุจุงู <span class="highlight">{user.username}</span>ุ</p>
                
                <p>ูุฃูู ุฃู ุชููู ูุฏ ุงุณุชูุชุนุช ุจุฎุฏูุฉ <strong>{service.name}</strong> ุงูุชู ุญุฌุฒุชูุง.</p>
                
                <p>ุชููููู ูุณุงุนุฏูุง ุนูู ุชุญุณูู ุฎุฏูุงุชูุง ููุณุงุนุฏ ุงููุณุชุฎุฏููู ุงูุขุฎุฑูู ุนูู ุงุชุฎุงุฐ ูุฑุงุฑุงุช ุฃูุถู.</p>
                
                <p>ููููู ุชูููู ุงูุฎุฏูุฉ ุจุณูููุฉ ูู ุฎูุงู:</p>
                <ol>
                  <li>ุงูุฏุฎูู ุฅูู ุตูุญุฉ ุงูุญุฌูุฒุงุช ุงูุฎุงุตุฉ ุจู</li>
                  <li>ุงูุจุญุซ ุนู ุญุฌุฒ ุฎุฏูุฉ {service.name}</li>
                  <li>ุงูููุฑ ุนูู ุฒุฑ "ุชูููู" ุงูููุฌูุฏ ุฃุณูู ุจุทุงูุฉ ุงูุญุฌุฒ</li>
                </ol>
                
                <div style="text-align: center; margin: 20px 0;">
                  <a href="{dashboard_url}" class="button">ุงูุฐูุงุจ ุฅูู ููุญุฉ ุงูุชุญูู</a>
                </div>
                
                <p>ุฃู ููููู ุฒูุงุฑุฉ ุตูุญุฉ ุงูุฎุฏูุฉ ูุจุงุดุฑุฉ ูุงูุชูููู ูู ููุงู:</p>
                
                <div style="text-align: center; margin: 20px 0;">
                  <a href="{service_url}" class="button">ุนุฑุถ ุชูุงุตูู ุงูุฎุฏูุฉ</a>
                </div>
                
                <p>ุดูุฑุงู ูุซูุชู ุจูุง ููุงุณุชุฎุฏุงูู ููุตุชูุง!</p>
                
                <div class="footer">
                    ูุฐุง ุจุฑูุฏ ุฅููุชุฑููู ุชููุงุฆูุ ูุฑุฌู ุนุฏู ุงูุฑุฏ ุนููู.
                </div>
            </div>
        </body>
        </html>
        """
        
        # ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุฅุฐุง ูุงู ููุนูุงู
        email_sent = send_email(user.email, subject, html_content)
        if email_sent:
            logging.info(f"ุชู ุฅุฑุณุงู ุจุฑูุฏ ุฅููุชุฑููู ูููุณุชุฎุฏู {user.id} ูุชูููู ุงูุฎุฏูุฉ {service.id}")
        
        return True
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุฅุดุนุงุฑ ุงูุชูููู: {str(e)}")
        return False

def check_completed_bookings():
    """ุงูุชุญูู ูู ุงูุญุฌูุฒุงุช ุงูููุชููุฉ ูุฅุฑุณุงู ุฅุดุนุงุฑุงุช ุงูุชูููู"""
    try:
        # ุงูุจุญุซ ุนู ุงูุญุฌูุฒุงุช ุงููุคูุฏุฉ ุงูุชู ุงูุชูุช ููู ูุชู ุชูููููุง ุจุนุฏ
        now = datetime.utcnow()
        completed_bookings = Booking.query.filter(
            Booking.status.in_(['confirmed', 'completed']),
            Booking.booking_date <= now
        ).all()
        
        notifications_sent = 0
        
        for booking in completed_bookings:
            # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ููุช ุงูุฎุฏูุฉ ูุฏ ุงูุชูู
            service = Service.query.get(booking.service_id)
            end_time = booking.booking_date + timedelta(minutes=service.duration)
            
            if end_time <= now:
                # ุชุบููุฑ ุญุงูุฉ ุงูุญุฌุฒ ุฅูู ููุชููุฉ ุฅุฐุง ูุงู ูุคูุฏูุง
                if booking.status == 'confirmed':
                    booking.status = 'completed'
                    
                    # ุฅูุดุงุก ุฅุดุนุงุฑ ููุนููู ุจุฅููุงู ุงูุฎุฏูุฉ
                    create_notification(
                        user_id=booking.client_id,
                        title="ุชู ุฅููุงู ุงูุฎุฏูุฉ",
                        content=f"ุชู ุฅููุงู ุฎุฏูุฉ {service.name} ุจูุฌุงุญ. ูุดูุฑู ุนูู ุงุณุชุฎุฏุงู ููุตุชูุง.",
                        notification_type="success",
                        related_id=booking.id,
                        related_type="booking"
                    )
                    
                    # ุฅูุดุงุก ุฅุดุนุงุฑ ููุฒูุฏ ุงูุฎุฏูุฉ ุจุฅููุงู ุงูุฎุฏูุฉ
                    provider = ServiceProvider.query.get(service.provider_id)
                    create_notification(
                        user_id=provider.user_id,
                        title="ุชู ุฅููุงู ุงูุฎุฏูุฉ",
                        content=f"ุชู ุฅููุงู ุฎุฏูุฉ {service.name} ุจูุฌุงุญ ููุนููู.",
                        notification_type="success",
                        related_id=booking.id,
                        related_type="booking"
                    )
                    
                    notifications_sent += 2
                    db.session.commit()
                
                # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุงู ุจุงูุชูููู ุจุงููุนู
                from models import Review
                existing_review = Review.query.filter_by(
                    user_id=booking.client_id,
                    service_id=booking.service_id
                ).first()
                
                if not existing_review:
                    # ุฅุฑุณุงู ุฅุดุนุงุฑ ุงูุชูููู ุฅุฐุง ูู ูุชู ุฅุฑุณุงู ุฅุดุนุงุฑ ูู ุงูู 24 ุณุงุนุฉ ุงููุงุถูุฉ
                    last_notification = Notification.query.filter_by(
                        user_id=booking.client_id,
                        related_id=booking.id,
                        related_type="review_reminder"
                    ).order_by(Notification.created_at.desc()).first()
                    
                    # ุงูุชุญูู ุฅุฐุง ูู ูุณุจู ุฅุฑุณุงู ุฅุดุนุงุฑ ุฃู ุฅุฐุง ูุงู ุงูุฅุดุนุงุฑ ุงูุฃุฎูุฑ ูุจู ุฃูุซุฑ ูู 24 ุณุงุนุฉ
                    if not last_notification or (now - last_notification.created_at > timedelta(hours=24)):
                        send_review_notification(booking.id)
                        notifications_sent += 1
        
        logging.info(f"ุชู ุฅุฑุณุงู {notifications_sent} ุฅุดุนุงุฑุงุช ูุญุฌูุฒุงุช ููุชููุฉ")
        return True
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุญุฌูุฒุงุช ุงูููุชููุฉ: {str(e)}")
        return False